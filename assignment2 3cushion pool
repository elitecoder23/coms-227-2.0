package hw2;

import api.PlayerPosition;
import api.BallType;
import static api.PlayerPosition.*;
import static api.BallType.*;

/**
 * Class that models the game of three-cushion billiards.
 * 
 * @author ANISH NAG
 */

public class ThreeCushion {

	// TODO: EVERTHING ELSE GOES HERE
	// Note that this code will not compile until you have put in stubs for all
	// the required methods.

	// The method below is provided for you and you should not modify it.
	// The compile errors will go away after you have written stubs for the
	// rest of the API methods.

	/**
	 * Returns a one-line string representation of the current game state. The
	 * format is:
	 * <p>
	 * <tt>Player A*: X Player B: Y, Inning: Z</tt>
	 * <p>
	 * The asterisks next to the player's name indicates which player is at the
	 * table this inning. The number after the player's name is their score. Z is
	 * the inning number. Other messages will appear at the end of the string.
	 * 
	 * @return one-line string representation of the game state
	 */
	
	
	public String toString() {
		String fmt = "Player A%s: %d, Player B%s: %d, Inning: %d %s%s";
		String playerATurn = "";
		String playerBTurn = "";
		String inningStatus = "";
		String gameStatus = "";
		if (getInningPlayer() == PLAYER_A) {
			playerATurn = "*";
		} else if (getInningPlayer() == PLAYER_B) {
			playerBTurn = "*";
		}
		if (isInningStarted()) {
			inningStatus = "started";
		} else {
			inningStatus = "not started";
		}
		if (isGameOver()) {
			gameStatus = ", game result final";
		}
		return String.format(fmt, playerATurn, getPlayerAScore(), playerBTurn, getPlayerBScore(), getInning(),
				inningStatus, gameStatus);
	}
	
	
	
	private int firstInning;
	private int pointsWinGame;
	private PlayerPosition currentPlayer;
	private boolean isShotStart;
	private boolean IsInningStart;
	private boolean lastShot;
	private boolean shotBreak;
	private BallType ballColor;
	private PlayerPosition winnerOfLag;
	private boolean isOtherBallHit;
	private boolean isRedHit;
	private int cushionHits;
	private  int playerAScore;
	private int playerBScore;
	private boolean typeBankShot;
	private boolean isPossiblyBankShot;
	private boolean gameIsOver;
	private boolean givePoint;
	private boolean lagChooser;


/**
 * @param lagWinner
 * @param pointsToWin
 */
public ThreeCushion(PlayerPosition lagWinner, int pointsToWin)
{
	firstInning = 1;
	pointsWinGame = pointsToWin;
	winnerOfLag = lagWinner;
	
	
	
	
	
	
	
	 
	//lagWinner = either Player A or B
	//pointsToWin - the number of points a player needs to reach for the game to end
	//based on simple tests, the lagwinner is player A and the points needed to win are 3
	
	
}


/**
 * @param selfBreak
 * @param cueBall
 */
public void lagWinnerChooses(boolean selfBreak, BallType cueBall)
{
	shotBreak = true;
	
	//
	
	if(winnerOfLag == PLAYER_A && selfBreak == true)
	{
		currentPlayer = PLAYER_A;
	}
	else if(winnerOfLag == PLAYER_A && selfBreak == false)
	{
		currentPlayer = PLAYER_B;
	}
	
	if(winnerOfLag == PLAYER_B && selfBreak == true)
	{
		currentPlayer = PLAYER_B;
	}
	else if(winnerOfLag == PLAYER_B && selfBreak == false)
	{
		currentPlayer = PLAYER_A;
	}
	
	//

	ballColor = cueBall;
	
	//
	
	if(selfBreak == false && ballColor == WHITE)
	{
		ballColor = YELLOW;
	}
	else if(selfBreak == false && ballColor == YELLOW)
	{
		ballColor = WHITE;
	}	
	
	lagChooser = true;
}

	


/**
 * @param ball
 */
public void cueStickStrike(BallType ball)
{
	if(ball != ballColor)
	{
		foul();
		return;
	}
	IsInningStart = true;
	isShotStart = true;
	

	if(gameIsOver == true) {
	IsInningStart = false;	
	isShotStart = false;
	}
		
	cushionHits = 0;
	givePoint = false;
	isPossiblyBankShot = false;
	typeBankShot = false;
	isRedHit = false;
	isOtherBallHit = false;
	
	
}


/**
 * @param ball
 */
public void cueBallStrike(BallType ball)
{
	if(IsInningStart == false)
	{
		return;
	}
	
	if(shotBreak == true && isRedHit == false && ball != RED)
	{
		foul();
		return;
	}
	
	if(isShotStart == false)
	{
		return;
	
	}
	
	if(isGameOver())
	{
		return;
	}
	
	if(ball == RED)
	{
		isRedHit = true;
	}
	else
	{
		isOtherBallHit = true;
	}
	
	if(isRedHit && isOtherBallHit && cushionHits >= 3) {
		givePoint = true;
	}
	
	
		
	
	
	

}

/**
 * 
 */
public void cueBallImpactCushion()
{
	if(IsInningStart == true && shotBreak == true && isRedHit == false)
	{
		foul();
		return;
	}
	cushionHits += 1;
	
	if(isRedHit == false && isOtherBallHit == false && cushionHits == 3)
	{
		isPossiblyBankShot = true;
	}
}

/**
 * 
 */
public void endShot()
{
	if(IsInningStart == false)
	{
		return;
	}
	
	shotBreak = false;
	
	if(isRedHit == true && isOtherBallHit == true && givePoint)
	{
		
		if(isPossiblyBankShot == true)
		{
			typeBankShot = true;
		}
		else
		{
			typeBankShot = false;
		}
		
		
		if(currentPlayer == PLAYER_A)
		{
			this.playerAScore += 1;
			
			if(this.playerAScore == pointsWinGame)
			{
				gameIsOver = true;
			}
		}
		else
		{
			this.playerBScore += 1;
			
			if(this.playerBScore == pointsWinGame)
			{
				gameIsOver = true;
			}
			
		}
		
		return;
		
	}
	
	firstInning += 1;
	isShotStart = false;
	
	IsInningStart = false;
	
	if(ballColor == WHITE)
	{
		ballColor = YELLOW;
	}
	else if(ballColor == YELLOW)
	{
		ballColor = WHITE;
	}
	
	//
	
	if(currentPlayer == PLAYER_A)
	{
		currentPlayer = PLAYER_B;
	}
	else if(currentPlayer == PLAYER_B)
	{
		currentPlayer = PLAYER_A;
	}
	
}

/**
 * 
 */
public void foul()
{
	
	if(lagChooser == false)
	{
		return;
	}

	IsInningStart = false;
	firstInning += 1;
	
	if(ballColor == WHITE)
	{
		ballColor = YELLOW;
	}
	else if(ballColor == YELLOW)
	{
		ballColor = WHITE;
	}
	
	
	//
	
	if(currentPlayer == PLAYER_A)
	{
		currentPlayer = PLAYER_B;
	}
	else if(currentPlayer == PLAYER_B)
	{
		currentPlayer = PLAYER_A;
	}
	if (gameIsOver == true) {
		firstInning = 1;
	}
	
	
	
	
	
	
}

/**
 * @return
 */
public int getPlayerAScore()
{
	return this.playerAScore;
}

/**
 * @return
 */
public int getPlayerBScore()
{
	return this.playerBScore;
}

/**
 * @return
 */
public int getInning()
{
	return firstInning;
}

/**
 * @return
 */
public BallType getCueBall()
{
	return ballColor;
}

/**
 * @return
 */
public PlayerPosition getInningPlayer()
{
	return currentPlayer;
}

/**
 * @return
 */
public boolean isBreakShot()
{
	return shotBreak;
}

/**
 * @return
 */
public boolean isBankShot()
{
	return typeBankShot;
}

/**
 * @return
 */
public boolean isShotStarted()
{
	return isShotStart;
}

/**
 * @return
 */
public boolean isInningStarted()
{
	return IsInningStart;
}

/**
 * @return
 */
public boolean isGameOver()
{
	return gameIsOver;
}

}

